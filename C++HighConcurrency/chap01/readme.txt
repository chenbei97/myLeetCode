（1）计算机无论是装配多个处理器还是单个多核处理器，还是多个多核处理器，
这些计算机都能够真正并行运作多个任务，称之为硬件并发。

（2）单核机执行多任务时候需要交替执行，每当系统从某个任务切换到另一个时，
就要完成一次上下文切换，需要保存当前任务的CPU状态和指令指针然后判定要切换到哪个任务，
并加载新任务的CPU状态，以及指令和数据也要从内存加载到缓存，所以会耗费时间。

（3）需要注意的是硬件自身支持同时运行的独立任务的数量。

（4）并发的方式分为2种，多进程并发和多线程并发，举个例子：
同一个项目，2位开发者各自在一间办公室也可以在同一间办公室，那么办公室就代表进程，开发者代表线程。

多进程并发：将一个应用软件拆分成多个独立进程，它们都止汗单一线程，非常类似于同时运行浏览器和文字处理软件，
这些独立进程之间也可以进行通信（借助信号、套接字、文件和管道等）。坏处在于设置复杂，速度慢，以及进程之间要提供防护措施，
防止某进程意外改动另一个进程的数据，运行多个进程的固定开销也比较大，操作系统必须调配资源来管控进程。
但是高保护性也有好处，能够写出比较安全的代码，同时通过网络连接是可以让独立的进程在不同的计算机中运行。

多线程并发：同一进程的所有线程可以共享数据，指向对象的指针和引用可以在线程之间传递，但是比较复杂。

不过同一数据在不同进程中的地址不一定相同，且C++不直接支持进程通信，需要依赖平台专属的应用程序接口。
综合考虑以上，使用多线程的应用程序更多一些。

（5）什么是并行？并行相对并发更加强调性能，关注利用可调配的硬件资源提升大规模数据处理的性能。
谈及并发时主要关心的是分离关注点或响应能力。例如一个DVD用户界面程序，需要同时读取碟片数据用于播放还要面对用户的操作如暂停
这样的话多线程可以分离这2个点，一个线程只负责用户界面管理，一个线程只负责DVD播放，它们之间保留必要的交互，如暂停操作，
这样可以减少2类代码逻辑上的纠缠。

（6）增强性能的2种并行方式
将单一任务分解为多个部分，各自并行运作可以减少总运行耗时，但是任务之间可能也会存在纠缠。
任务并行可以针对处理过程，如调度某个线程运行同一算法的某部分，另一个线程运行其他部分。
任务并行也可以针对处理数据，例如对数据的不同部分执行相同的操作，这就是数据并行。