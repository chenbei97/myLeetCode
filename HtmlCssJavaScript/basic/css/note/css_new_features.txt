新增了属性选择器、结构伪类选择器、伪元素选择器

属性选择器:
    可以依据元素特定属性来选择元素，这样就可以不借助于class或者id来选择
    E[att] 选择具有att属性的E元素
    E[att="val"] 选择具有att属性且等于val的E元素
    E[att^="val":] 选择具有att属性的且以val开头的E元素
    E[att$="val":] 选择具有att属性的且以val结尾的E元素
    E[att*="val":] 选择具有att属性的且含有val开头的E元素

结构伪类选择器:
    根据文档结构选择元素，常用于根据父级选择器里面的子元素
    所有元素一起排序，然后选择，如果不匹配就不选
    E:first-child 匹配父元素的第1个子元素E
    E:last-child 匹配父元素的最后1个子元素E
    E:nth-child(n) 匹配父元素的第n个子元素E
    对指定的元素类型排序，然后选择
    E:first-of-type 指定类型E的第1个
    E:lst-of-type 指定类型E的最后1个
    E:nth-of-type(n) 指定类型E的第n个

    n: even | odd
        2n   | 2n+1
        5n (5,10,15)
        n+5 从第5个开始(包含)到最后
        -n+5 前5个(包含)

伪元素选择器:
    帮助我们利用css创建新标签元素，不需要html标签，从而简化html结构
    ::before 元素内部的前面插入内容
    ::after 元素内部的后面插入内容
    before和after创建1个元素，但是属于行内元素，新创建的元素在文档中找不到，所以称之为伪元素
    伪元素选择器和标签选择器一样，权重为1
    例如
    p::before {content:"hello";} 再每一个p元素前面插入内容

    常用场景:
        配合字体图标
        仿土豆效果
        伪元素清除浮动
